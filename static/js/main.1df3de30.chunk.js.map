{"version":3,"sources":["components/Tooltip/index.tsx","utils/utils.ts","charts/LeftAxis/Index.tsx","charts/BottomAxis/Index.tsx","charts/BarChart/Bars.tsx","charts/ChartContainer/index.tsx","charts/BarChart/index.tsx","charts/CirclePack/PackCircles.tsx","charts/CirclePack/index.tsx","charts/Number/index.tsx","charts/PieChart/Arcs.tsx","charts/PieChart/index.tsx","charts/ScatterPlot/Circles.tsx","charts/ScatterPlot/index.tsx","charts/Text/index.tsx","charts/TreeMap/TreeRects.tsx","charts/TreeMap/index.tsx","components/ChartRenderer/index.tsx","components/DashboardItem/index.tsx","components/Dashboard/index.tsx","utils/interfaces.ts","components/Select/index.tsx","components/AddChartForm/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","components/TopSongs/chart.ts","components/TopSongs/index.tsx","App.tsx","index.tsx"],"names":["Tooltip","attrs","className","show","style","top","y","left","x","content","getValues","category","data","map","song","getNumericValues","getMostFrequent","values","a","filter","b","length","indexOf","Math","max","apply","getBuckets","group","d","Array","from","name","children","isLinearScale","scale","ticks","mouseOver","e","setattrs","options","Name","concat","z","clientX","clientY","mouseOut","prevState","LeftAxis","label","f","format","calcW","width","margin","right","calcH","height","bottom","transform","x1","y1","x2","y2","tick","i","BottomAxis","buckets","step","bandwidth","Bars","onSelect","selected","setTTipAttrs","includes","onMouseEnter","onMouseLeave","ChartContainer","viewBox","BarChart","useState","tTipAttrs","chartAttrs","maxData","scaleLinear","domain","range","scaleBand","String","padding","PackCircles","circles","circle","maxChar","r","txt","substring","child","CirclePack","root","pack","size","circlePack","hierarchy","sum","Number","Set","getUniqueValues","Arcs","arc","radius","isBucket","arr","totalBCount","reduce","acc","prevBCount","slice","startAngle","PI","endAngle","midAngle","pos","cos","sin","labelAnchor","innerRadius","outerRadius","textAnchor","PieChart","sort","descending","Circles","ScatterPlot","valuesX","valuesY","valuesZ","maxDataX","maxDataY","maxDataZ","minDataX","min","minDataY","minDataZ","nice","Text","TreeRects","rects","rect","x0","y0","onClick","TreeMap","treemap","paddingInner","paddingOuter","tree","ChartRenderer","type","setBlockType","chart","DashboardItem","item","onRemove","title","Dashboard","items","id","chart_types","width_options","colors","cat_options","num_options","map_options","Select","setSelected","value","onChange","event","target","option","emptyChart","AddChartForm","onNewChart","setChart","setField","field","onSubmit","preventDefault","random","placeholder","required","Footer","Artist","Header","text","onSetColor","href","rel","Chart","el","svg","groups","circlesX","circlesY","xyArea","xLine","yLine","xPath","yPath","xyPath","xText","yText","update","selectedX","selectedY","selectedOrder","datum","transition","duration","attr","this","select","html","clientWidth","append","area","line","selectAll","join","vis","TopSongs","setSelectedX","setSelectedY","setSelectedOrder","useRef","useEffect","current","resizeTimer","handleResize","clearTimeout","setTimeout","window","addEventListener","removeEventListener","cat","keys","ref","dataset","dashboardItems","chartsData","Object","App","setItems","floor","color","setColor","songs","newItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2lBAeeA,EARC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MACjB,OACE,qBAAKC,UAAS,kBAAaD,EAAME,MAAQC,MAAO,CAAEC,IAAKJ,EAAMK,EAAGC,KAAMN,EAAMO,GAA5E,SACGP,EAAMQ,W,OCPAC,EAAY,SAACC,EAAkBC,GAC1C,OAAOA,EAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKH,OAGpBI,EAAmB,SAACJ,EAAkBC,GACjD,OAAOA,EAAKC,KAAI,SAACC,GAAD,OAAWA,EAAKH,OAOrBK,EAAkB,SAACL,EAAkBC,GAChD,IAAMK,EAASP,EAAUC,EAAUC,GAC7BC,EAAMI,EAAOJ,KAAI,SAACK,GAAD,OAAOD,EAAOE,QAAO,SAACC,GAAD,OAAOF,IAAME,KAAGC,UAC5D,OAAOJ,EAAOJ,EAAIS,QAAQC,KAAKC,IAAIC,MAAM,KAAMZ,MAGpCa,EAAa,SAACf,EAAkBC,GAC3C,IAAMC,EAAMc,YAAMf,GAAM,SAACgB,GAAD,OAAOA,EAAEjB,MAEjC,OAD0BkB,MAAMC,KAAKjB,GAAK,yCAAoB,CAAEkB,KAAtB,KAAkCC,SAAlC,UAI/BC,EAAgB,SAC3BC,GAEA,QAAQA,EAA6CC,OAO1CC,EAAY,SACvBC,EACAT,EACAU,EACAC,GAEA,IAAI9B,EAAU,GACDmB,EAVQI,SAWnBvB,EAAO,UAAM8B,EAAQ/B,EAAd,aAAoBoB,EAAEG,KAAtB,wBACEH,EAAEI,SAASX,SAEpBZ,EAAO,gBAAYmB,EAAEY,KAAd,eACPD,EAAQ/B,EADD,aACOoB,EAAEW,EAAQ/B,IACpB+B,EAAQjC,IACVG,EAAUA,EAAQgC,OAAR,gBACVF,EAAQjC,EADE,aACIsB,EAAEW,EAAQjC,MAGtBiC,EAAQG,IACVjC,EAAUA,EAAQgC,OAAR,gBACVF,EAAQG,EADE,aACId,EAAEW,EAAQG,OAI5BJ,EAAS,CACP9B,GAAI6B,EAAEM,QAAU,GAChBrC,GAAI+B,EAAEO,QAAU,GAChBzC,MAAM,EACNM,QAASA,KAIAoC,EAAW,SAACP,GACvBA,GAAS,SAACQ,GAAD,mBAAC,eACLA,GADI,IAEP3C,MAAM,QCzCK4C,G,OApBE,SAAC,GAAwC,IAAtCb,EAAqC,EAArCA,MAAOjC,EAA8B,EAA9BA,MAAO+C,EAAuB,EAAvBA,MAC1BC,EAAIC,YAAO,KACXC,EAAQlD,EAAMmD,MAAQnD,EAAMoD,OAAOC,MAAQrD,EAAMoD,OAAO9C,KACxDgD,EAAQtD,EAAMuD,OAASvD,EAAMoD,OAAOI,OAASxD,EAAMoD,OAAOhD,IAChE,OACE,oBAAGH,UAAU,cAAcwD,UAAS,kBAApC,UACE,sBAAMC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI7D,EAAMuD,OAASvD,EAAMoD,OAAOI,SAC3D,sBAAMvD,UAAU,QAAQI,GAAIL,EAAMoD,OAAO9C,KAAMC,GAAK+C,EAAQ,EAA5D,SACGP,IAEFd,EAAMC,QAAQtB,KAAI,SAACkD,EAAMC,GAAP,OACjB,oBAAWN,UAAS,uBAAkBxB,EAAM6B,GAAxB,KAApB,UACE,sBAAMJ,GAAIR,EAAOU,IAAK,EAAG3D,UAAU,SACnC,sBAAMM,GAAI,EAAV,SAAcyC,EAAEc,OAFVC,WCiBDC,G,OA1BI,SAAC,GAAiD,IAA/C/B,EAA8C,EAA9CA,MAAOgC,EAAuC,EAAvCA,QAASjE,EAA8B,EAA9BA,MAAO+C,EAAuB,EAAvBA,MACrCC,EAAIC,YAAO,KACXC,EAAQlD,EAAMmD,MAAQnD,EAAMoD,OAAOC,MAAQrD,EAAMoD,OAAO9C,KAC9D,OACE,oBAAGL,UAAU,cAAcwD,UAAS,uBAAkBzD,EAAMuD,OAASvD,EAAMoD,OAAOI,OAA9C,KAApC,UACE,sBAAME,GAAI,EAAGC,GAAI,EAAGC,GAAIV,EAAOW,GAAI,IACnC,sBAAM5D,UAAU,QAAQM,EAAG2C,EAAQ,EAAG7C,EAAGL,EAAMoD,OAAOI,OAAS,GAA/D,SACGT,IAEFf,EAAcC,GACXA,EAAMC,QAAQtB,KAAI,SAACkD,EAAMC,GAAP,OAChB,mBAAWN,UAAS,oBAAexB,EAAM6B,GAArB,QAApB,SACE,sBAAMvD,GAAI,GAAV,SAAeyC,EAAEc,MADXC,MAIVE,EAAQrD,KAAI,SAACe,EAAGoC,GAAJ,OACV,mBAAWN,UAAS,oBAAexB,EAAMiC,QAAUH,EAAI,GAAnC,QAApB,SACE,sBAAMxD,GAAI,EAAGF,GAAI4B,EAAMkC,YAAc,EAArC,SACGlC,EAAMkC,YAAc,GAAKxC,EAAEG,KAAO,MAF/BiC,WCqBLK,EApCF,SAAC,GAA6E,IAA3E7D,EAA0E,EAA1EA,EAAGF,EAAuE,EAAvEA,EAAG4D,EAAoE,EAApEA,QAASI,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,SAAUhC,EAAuC,EAAvCA,QAASiC,EAA8B,EAA9BA,aAC1D,OACE,mBAAGd,UAAS,kBAAZ,SACGQ,EAAQrD,KAAI,SAACO,EAAG4C,GAAJ,OACX,oBAAG9D,UAAU,kBAA0BwD,UAAS,oBAAelD,EAAE2D,QAAUH,EAAI,GAA/B,QAAhD,UACG5C,EAAEY,SAASnB,KAAI,SAACe,EAAGoC,GAAJ,OACd,sBAEE9D,UAAS,qBAAgBqE,EAASE,SAAS7C,IAC3CwB,MAAO5C,EAAE4D,YACTZ,OAAQlD,EAAE,GAAKA,EAAE,GACjBE,GAAIA,EAAE4D,YACN9D,EAAGA,EAAE0D,EAAI,IALJA,MAQT,sBACE9D,UAAS,aACTkD,MAAO5C,EAAE4D,YACTZ,OAAQlD,EAAE,GAAKA,EAAEc,EAAEY,SAASX,QAC5Bb,GAAIA,EAAE4D,YACN9D,EAAGA,EAAEc,EAAEY,SAASX,QAChBqD,aAAc,SAACrC,GACbD,EAAUC,EAAGjB,EAAGoD,EAAcjC,GAC9B+B,EAASlD,EAAEY,WAEb2C,aAAc,WACZ9B,EAAS2B,GACTF,EAAS,SAvBqBN,SCH7BY,EARQ,SAAC,GAA8C,IAA5C3E,EAA2C,EAA3CA,MAAO+B,EAAoC,EAApCA,SAC/B,OACE,qBAAK6C,QAAO,cAAS5E,EAAMmD,MAAf,YAAwBnD,EAAMuD,QAA1C,SACE,mBAAGE,UAAS,oBAAezD,EAAMoD,OAAO9C,KAA5B,YAAoCN,EAAMoD,OAAOhD,IAAjD,KAAZ,SAAsE2B,OCmD7D8C,EAnDE,SAAC,GAAuD,IAArDvC,EAAoD,EAApDA,QAAS3B,EAA2C,EAA3CA,KAAM0D,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAA2B,EACpCQ,mBAAS,CACzCvE,EAAG,EACHF,EAAG,EACHH,MAAM,EACNM,QAAS,KAL2D,mBAC/DuE,EAD+D,KACpDR,EADoD,KAQhES,EAAyB,CAC7B5B,OAAQ,CACNhD,IAAK,GACLiD,MAAO,GACPG,OAAQ,IACRlD,KAAM,IAER6C,MAAO,IACPI,OAAQ,KAGJU,EAAUxC,EAAWa,EAAQ/B,EAAGI,GAChCsE,EAAU1D,YAAI0C,GAAS,SAACtC,GAAD,OAAOA,EAAEI,SAASX,UAEzCf,EAAI6E,cACPC,OAAO,CAAC,EAAGF,GAAoB,IAC/BG,MAAM,CAACJ,EAAWzB,OAASyB,EAAW5B,OAAOI,OAAQwB,EAAW5B,OAAOhD,MAEpEG,EAAI8E,cACPF,OAAOlB,EAAQrD,KAAI,SAACe,GAAD,OAAO2D,OAAO3D,EAAEG,UACnCsD,MAAM,CAACJ,EAAW5B,OAAO9C,KAAM0E,EAAW7B,MAAQ6B,EAAW5B,OAAOC,QACpEkC,QAAQ,IAEX,OACE,qCACE,eAAC,EAAD,CAAgBvF,MAAOgF,EAAvB,UACE,cAAC,EAAD,CAAU/C,MAAO5B,EAAGL,MAAOgF,EAAYjC,MAAM,eAC7C,cAAC,EAAD,CAAYd,MAAO1B,EAAGP,MAAOgF,EAAYf,QAASA,EAASlB,MAAOT,EAAQ/B,IAC1E,cAAC,EAAD,CACEA,EAAGA,EACHF,EAAGA,EACH4D,QAASA,EACTK,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,OAGb,cAAC,EAAD,CAAStC,MAAO+E,QCFPS,G,OA1CK,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,QAASpB,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,SAAUhC,EAA8C,EAA9CA,QAASiC,EAAqC,EAArCA,aAC3D,OACE,mCACGkB,GACCA,EAAQ7E,KAAI,SAAC8E,EAAQ3B,GACnB,IAAI4B,EAAUD,EAAOE,EAAI,GACrBC,EAAcP,OAAQI,EAAO/E,KAAgBmB,MAEjD,OADA+D,EAAMA,EAAIzE,OAASuE,EAAUE,EAAIC,UAAU,EAAGH,GAAWE,EAEvD,oBAAG5F,UAAU,uBAAb,UACE,wBACEA,UAAU,SACV2F,EAAGF,EAAOE,EACVnC,UAAS,oBAAeiC,EAAOnF,EAAtB,aAA4BmF,EAAOrF,EAAnC,KACToE,aAAc,SAACrC,GACbD,EAAUC,EAAGsD,EAAO/E,KAAc4D,EAAcjC,GAChD+B,EAAUqB,EAAO/E,KAAgBoB,WAEnC2C,aAAc,WACZ9B,EAAS2B,GACTF,EAAS,OAGZqB,EAAO3D,UACN2D,EAAO3D,SAASnB,KAAI,SAACmF,EAAOhC,GAAR,OAClB,wBAEE6B,EAAGG,EAAMH,EACT3F,UAAS,iBAAYqE,EAASE,SAASuB,EAAMpF,OAC7C8C,UAAS,oBAAesC,EAAMxF,EAArB,aAA2BwF,EAAM1F,EAAjC,MAHJ0D,MAMX,sBAAM9D,UAAU,mBAAmBM,EAAGmF,EAAOnF,EAAGF,EAAGqF,EAAOrF,EAA1D,SACGwF,MAxBoC9B,UC6BtCiC,EAzCI,SAAC,GAAuD,IAArD1D,EAAoD,EAApDA,QAAS3B,EAA2C,EAA3CA,KAAM0D,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAA2B,EACtCQ,mBAAS,CACzCvE,EAAG,EACHF,EAAG,EACHH,MAAM,EACNM,QAAS,KAL6D,mBACjEuE,EADiE,KACtDR,EADsD,KAQlES,EAAyB,CAC7B5B,OAAQ,CACNhD,IAAK,EACLiD,MAAO,EACPG,OAAQ,EACRlD,KAAM,GAER6C,MAAO,IACPI,OAAQ,KAIJ0C,EAA6C,CAAEnE,KAAM,OAAQC,SADnDN,EAAWa,EAAQ/B,EAAGI,IAIhC8E,EAFaS,cAAOC,KAAK,CAACnB,EAAW7B,MAAO6B,EAAWzB,SAASgC,QAAQ,EAE9Da,CADFC,YAAUJ,GAAMK,KAAI,SAAC3E,GAAD,OAAQA,EAAEI,SAAW,EAAI,MACzBA,SAElC,OACE,qCACE,cAAC,EAAD,CAAgB/B,MAAOgF,EAAvB,SACE,cAAC,EAAD,CACES,QAASA,EACTnB,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,MAGb,cAAC,EAAD,CAAStC,MAAO+E,QCnCPwB,EANA,SAAC,GAAmC,IAAjCjE,EAAgC,EAAhCA,QAAS3B,EAAuB,EAAvBA,KACnBqC,EAAIC,YAAO,KACXjC,ERKuB,SAACN,EAAkBC,GAChD,OAAO,YAAI,IAAI6F,IAAI/F,EAAUC,EAAUC,KQNxB8F,CAAgBnE,EAAQ/B,EAAGI,GAC1C,OAAO,oBAAIV,UAAU,aAAd,SAA4B+C,EAAEhC,EAAOI,WCsE/BsF,EA7DF,SAAC,GAUI,IAThB/F,EASe,EATfA,KACAgG,EAQe,EARfA,IACAC,EAOe,EAPfA,OACA5G,EAMe,EANfA,MACA6G,EAKe,EALfA,SACAxC,EAIe,EAJfA,SACAC,EAGe,EAHfA,SACAhC,EAEe,EAFfA,QACAiC,EACe,EADfA,aAEA,OACE,mBAAGtE,UAAS,gBAAmBwD,UAAS,oBAAezD,EAAMmD,MAAQ,EAA7B,YAAkCnD,EAAMuD,OAAS,EAAjD,KAAxC,SACG5C,EAAKC,KAAI,SAACO,EAAG4C,EAAG+C,GACf,IAAM5C,EAAO2C,EAAW1F,EAAEY,SAASX,OAAS,EACtC2F,EAAcD,EAAIE,QACtB,SAACC,EAAK9F,GAAN,OAAa0F,EAAWI,EAAM9F,EAAEY,SAASX,OAAS6F,EAAM,IACxD,GAEIC,EAAaJ,EAChBK,MAAM,EAAGpD,GACTiD,QAAO,SAACC,EAAK9F,GAAN,OAAa0F,EAAWI,EAAM9F,EAAEY,SAASX,OAAS6F,EAAM,IAAI,GAEhEG,EAAgC,EAAV9F,KAAK+F,GAASH,EAAcH,EAClDO,EAA8B,EAAVhG,KAAK+F,IAAUH,EAAahD,GAAS6C,EACzDQ,GAAYH,EAAaE,GAAY,EAAK,EAAIhG,KAAK+F,GAAM,EACzDG,EAAM,CAAU,IAATZ,EAAetF,KAAKmG,IAAIF,GAAoB,IAATX,EAAetF,KAAKoG,IAAIH,IAClEI,GAAeP,EAAaE,GAAY,EAAIhG,KAAK+F,GAAK,QAAU,MAEtE,OACE,8BACE,sBACEpH,UAAS,UAAK4G,EAAW,SAAW,SAA3B,YAAuCvC,EAASE,SAASrD,IAClEsD,aAAc,SAACrC,GACbD,EAAUC,EAAGjB,EAAGoD,EAAcjC,GAC1BuE,GAAUxC,EAASlD,EAAEY,WAE3B2C,aAAc,WACZ9B,EAAS2B,GACTF,EAAS,KAEX1C,EAAC,UAAKgF,EAAI,CACRiB,YAAsB,GAAThB,EACbiB,YAAajB,EACbQ,WAAYA,EACZE,SAAUA,OAIbT,GAAYS,EAAWF,EAAa9F,KAAK+F,GAAK,IAC7C,sBAAMpH,UAAU,QAAQE,MAAO,CAAE2H,WAAYH,GAAepH,EAAGiH,EAAI,GAAInH,EAAGmH,EAAI,GAA9E,SACGrG,EAAEW,SArBDiC,SCqBHgE,G,OA1DE,SAAC,GAAuD,IAArDzF,EAAoD,EAApDA,QAAS3B,EAA2C,EAA3CA,KAAM0D,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAA2B,EACpCQ,mBAAS,CACzCvE,EAAG,EACHF,EAAG,EACHH,MAAM,EACNM,QAAS,KAL2D,mBAC/DuE,EAD+D,KACpDR,EADoD,KAQhES,EAAyB,CAC7B5B,OAAQ,CACNhD,IAAK,EACLiD,MAAO,EACPG,OAAQ,EACRlD,KAAM,GAER6C,MAAO,IACPI,OAAQ,KAGJU,EAAUxC,EAAWa,EAAQ/B,EAAGI,GAChCiG,EAA6B,GAApB5B,EAAWzB,OACpBtC,EAAI0F,cAMV,OAJAhG,EAAKqH,MAAK,SAAC/G,EAAGE,GACZ,OAAO8G,YAAWhH,EAAEqB,EAAQ/B,GAAkBY,EAAEmB,EAAQ/B,OAIxD,qCACE,eAAC,EAAD,CAAgBP,MAAOgF,EAAvB,UACE,cAAC,EAAD,CACErE,KAAMA,EACNgG,IAAK1F,EACL2F,OAAQA,EACR5G,MAAOgF,EACP6B,UAAU,EACVvC,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,IAEX,cAAC,EAAD,CACE3B,KAAMsD,EACN0C,IAAK1F,EACL2F,OAAQA,EACR5G,MAAOgF,EACP6B,UAAU,EACVvC,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,OAGb,cAAC,EAAD,CAAStC,MAAO+E,SCnBPmD,EA5BC,SAAC,GAA6E,IAA3E3H,EAA0E,EAA1EA,EAAGF,EAAuE,EAAvEA,EAAGuF,EAAoE,EAApEA,EAAGjF,EAAiE,EAAjEA,KAAM0D,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,SAAUhC,EAAuC,EAAvCA,QAASiC,EAA8B,EAA9BA,aAC7D,OACE,mBAAGtE,UAAU,oBAAoBwD,UAAS,kBAA1C,SACG9C,EAAKC,KAAI,SAACe,EAAGoC,GAAJ,OACR,mBAEEN,UAAS,oBAAelD,GAAGoB,EAAEW,EAAQ/B,IAA5B,aAAkDF,GACxDsB,EAAEW,EAAQjC,IADJ,KAFX,SAME,wBACEJ,UAAS,iBAAYqE,EAASE,SAAS7C,IACvCiE,EAAGA,GAAGjE,EAAEW,EAAQG,IAChBgC,aAAc,SAACrC,GACbD,EAAUC,EAAGT,EAAG4C,EAAcjC,GAC9B+B,EAAS,CAAC1C,KAEZ+C,aAAc,WACZ9B,EAAS2B,GACTF,EAAS,QAdRN,SCyDAoE,G,OAlEK,SAAC,GAAuD,IAArD7F,EAAoD,EAApDA,QAAS3B,EAA2C,EAA3CA,KAAM0D,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAA2B,EACvCQ,mBAAS,CACzCvE,EAAG,EACHF,EAAG,EACHH,MAAM,EACNM,QAAS,KAL8D,mBAClEuE,EADkE,KACvDR,EADuD,KAQnE6D,EAAUtH,EAAiBwB,EAAQ/B,EAAGI,GACtC0H,EAAUvH,EAAiBwB,EAAQjC,EAAGM,GACtC2H,EAAUxH,EAAiBwB,EAAQG,EAAG9B,GAEtCqE,EAAyB,CAC7B5B,OAAQ,CACNhD,IAAK,GACLiD,MAAO,GACPG,OAAQ,IACRlD,KAAM,KAER6C,MAAO,IACPI,OAAQ,KAGJgF,EAAWhH,YAAI6G,GACfI,EAAWjH,YAAI8G,GACfI,EAAWlH,YAAI+G,GAEfI,EAAWC,YAAIP,GACfQ,EAAWD,YAAIN,GACfQ,EAAWF,YAAIL,GAEfjI,EAAI6E,cACPC,OAAO,CAACyD,GAAsB,EAAGJ,GAAsB,IACvDpD,MAAM,CAACJ,EAAWzB,OAASyB,EAAW5B,OAAOI,OAAQwB,EAAW5B,OAAOhD,MACvE0I,OAEGvI,EAAI2E,cACPC,OAAO,CAACuD,GAAsB,EAAGH,GAAsB,IACvDnD,MAAM,CAAC,EAAGJ,EAAW7B,MAAQ6B,EAAW5B,OAAOC,MAAQ2B,EAAW5B,OAAO9C,OACzEwI,OAEGlD,EAAIV,cACPC,OAAO,CAAC0D,GAAsB,EAAGJ,GAAsB,IACvDrD,MAAM,CAAC,EAAG,KAEb,OACE,qCACE,eAAC,EAAD,CAAgBpF,MAAOgF,EAAvB,UACE,cAAC,EAAD,CAAU/C,MAAO5B,EAAGL,MAAOgF,EAAYjC,MAAOT,EAAQjC,IACtD,cAAC,EAAD,CAAY4B,MAAO1B,EAAGP,MAAOgF,EAAYf,QAAS,GAAIlB,MAAOT,EAAQ/B,IACrE,cAAC,EAAD,CACEA,EAAGA,EACHF,EAAGA,EACHuF,EAAGA,EACHjF,KAAMA,EACN2D,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,OAGb,cAAC,EAAD,CAAStC,MAAO+E,SCjEPgE,EAJF,SAAC,GAAmC,IAAjCzG,EAAgC,EAAhCA,QAAS3B,EAAuB,EAAvBA,KACvB,OAAO,oBAAIV,UAAU,aAAd,SAA4Bc,EAAgBuB,EAAQ/B,EAAGI,MCyDjDqI,G,OAjDG,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,MAAO5E,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,SAAUhC,EAA4C,EAA5CA,QAASiC,EAAmC,EAAnCA,aACvD,OACE,mCACG0E,GACCA,EAAMrI,KAAI,SAACsI,EAAMnF,GACf,IAAI4B,GAAWuD,EAAKxF,GAAKwF,EAAKC,IAAM,GAChCtD,EAAcP,OAAQ4D,EAAKvI,KAAgBmB,MAE/C,OADA+D,EAAMA,EAAIzE,OAASuE,EAAUE,EAAIC,UAAU,EAAGH,GAAWE,EAEvD,oBAAG5F,UAAU,kBAAb,UACE,sBACEA,UAAU,SACVM,EAAG2I,EAAKC,GACR9I,EAAG6I,EAAKE,GACRjG,MAAO+F,EAAKxF,GAAKwF,EAAKC,GACtB5F,OAAQ2F,EAAKvF,GAAKuF,EAAKE,GACvBC,QAAS,kBAAMhF,EAAU6E,EAAKvI,KAAgBoB,WAC9C0C,aAAc,SAACrC,GACbD,EAAUC,EAAG8G,EAAKvI,KAAc4D,EAAcjC,GAC9C+B,EAAU6E,EAAKvI,KAAgBoB,WAEjC2C,aAAc,WACZ9B,EAAS2B,GACTF,EAAS,OAGZ6E,EAAKnH,UACJmH,EAAKnH,SAASnB,KAAI,SAACmF,EAAOhC,GACxB,OACE,sBAEE9D,UAAS,iBAAYqE,EAASE,SAASuB,EAAMpF,OAC7CJ,EAAGwF,EAAMoD,GACT9I,EAAG0F,EAAMqD,GACTjG,MAAO4C,EAAMrC,GAAKqC,EAAMoD,GACxB5F,OAAQwC,EAAMpC,GAAKoC,EAAMqD,IALpBrF,MASb,sBAAM9D,UAAU,mBAAmBM,EAAG2I,EAAKC,GAAK,GAAI9I,EAAG6I,EAAKE,GAAK,GAAjE,SACGvD,MA/B+B9B,UCqCjCuF,EAjDC,SAAC,GAAuD,IAArDhH,EAAoD,EAApDA,QAAS3B,EAA2C,EAA3CA,KAAM0D,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAA2B,EACnCQ,mBAAS,CACzCvE,EAAG,EACHF,EAAG,EACHH,MAAM,EACNM,QAAS,KAL0D,mBAC9DuE,EAD8D,KACnDR,EADmD,KAQ/DS,EAAyB,CAC7B5B,OAAQ,CACNhD,IAAK,GACLiD,MAAO,EACPG,OAAQ,EACRlD,KAAM,GAER6C,MAAO,IACPI,OAAQ,KAIJ0C,EAA6C,CAAEnE,KAAM,OAAQC,SADnDN,EAAWa,EAAQ/B,EAAGI,IAYhCsI,EATKM,cACRpD,KAAK,CACJnB,EAAW7B,MAAQ6B,EAAW5B,OAAO9C,KAAO0E,EAAW5B,OAAOC,MAC9D2B,EAAWzB,OAASyB,EAAW5B,OAAOhD,IAAM4E,EAAW5B,OAAOI,SAE/DgG,aAAa,GACbC,aAAa,EAGFC,CADFrD,YAAUJ,GAAMK,KAAI,SAAC3E,GAAD,OAAQA,EAAEI,SAAW,EAAI,MAC/BA,SAE1B,OACE,qCACE,cAAC,EAAD,CAAgB/B,MAAOgF,EAAvB,SACE,cAAC,EAAD,CACEiE,MAAOA,EACP3E,SAAUA,EACVD,SAAUA,EACVE,aAAcA,EACdjC,QAASA,MAGb,cAAC,EAAD,CAAStC,MAAO+E,QCbP4E,EAxBO,SAAC,GAA+D,IAA7DrH,EAA4D,EAA5DA,QAAS3B,EAAmD,EAAnDA,KAAM0D,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAsBhD,OArBqB,SAACsF,GACpB,OAAQA,GACN,IAAK,YACH,OAAO,cAAC,EAAD,CAAQtH,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAC7E,IAAK,UACH,OAAO,cAAC,EAAD,CAAMhC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAC3E,IAAK,MACH,OAAO,cAAC,EAAD,CAAUhC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAC/E,IAAK,UACH,OAAO,cAAC,EAAD,CAAShC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAC9E,IAAK,cACH,OAAO,cAAC,EAAD,CAAYhC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IACjF,IAAK,MACH,OAAO,cAAC,EAAD,CAAUhC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAC/E,IAAK,eACH,OAAO,cAAC,EAAD,CAAahC,QAASA,EAAS3B,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,IAClF,QACE,OAAO,mDAINuF,CAAavH,EAAQwH,QCffC,EAXO,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,SAAUtJ,EAAmD,EAAnDA,KAAM0D,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SACvD,OACE,sBAAKrE,UAAS,8BAAyB+J,EAAK7G,OAA5C,UACE,6BAAK6G,EAAKE,QACV,qBAAKjK,UAAU,QAAQoJ,QAAS,kBAAMY,EAASD,EAAKE,QAApD,eAGA,cAAC,EAAD,CAAe5H,QAAS0H,EAAMrJ,KAAMA,EAAM0D,SAAUA,EAAUC,SAAUA,QCa/D6F,EAlBG,SAAC,GAA6E,IAA3EC,EAA0E,EAA1EA,MAAOrI,EAAmE,EAAnEA,SAAUkI,EAAyD,EAAzDA,SAAUtJ,EAA+C,EAA/CA,KAAM0D,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,SAC9D,OACE,sBAAKrE,UAAU,YAAf,UACGmK,EAAMxJ,KAAI,SAACoJ,GAAD,OACT,cAAC,EAAD,CACEA,KAAMA,EAENC,SAAUA,EACVtJ,KAAMA,EACN0D,SAAUA,EACVC,SAAUA,GAJL0F,EAAKK,OAObtI,MC3BMuI,EAAc,CACzB,MACA,MACA,eACA,YACA,UACA,UACA,eAEWC,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1CC,EAAS,CAAC,OAAQ,SAAU,OAC5BC,EAAc,CACzB,SACA,OACA,SACA,UACA,OACA,OACA,MACA,kBAGWC,EAAc,CACzB,OACA,eACA,eACA,cACA,SACA,WACA,WACA,cACA,mBACA,MACA,QACA,iBACA,WAGWC,EAAc,CACzB,eACA,eACA,SACA,mBACA,WACA,cACA,W,OCrBaC,G,cAfA,SAAC,GAAyD,IAAvDtI,EAAsD,EAAtDA,QAASS,EAA6C,EAA7CA,MAAO8H,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,MAC7C,OACE,sBAAK7K,UAAU,eAAf,UACE,gCAAQ8C,IACR,wBAAQ+H,MAAOA,EAAOC,SAAU,SAACC,GAAD,OAAWH,EAAYG,EAAMC,OAAOH,QAApE,SACGxI,EAAQ1B,KAAI,SAACsK,GAAD,OACX,wBAAQJ,MAAOI,EAAf,SACGA,GADyBA,aCAhCC,EAAsC,CAC1CjB,MAAO,GACPG,GAAI,KACJlH,MAAO,IACP2G,MAAOQ,EAAY,GACnB/J,EAAG,MACHF,EAAG,eACHoC,EAAG,UA+EU2I,EA5EM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAoC,EAChCvG,mBAASqG,GADuB,mBACnDrB,EADmD,KAC5CwB,EAD4C,KASpDC,EAAW,SAACT,EAAeU,GAC/BF,GAAS,SAACzI,GAAD,mBAAC,eACLA,GADI,kBAEN2I,EAAQV,QAIb,OACE,sBAAK7K,UAAS,6BAAd,UACE,oDACA,uBAAMwL,SAjBK,SAACrJ,GACdA,EAAEsJ,iBACFH,EAASzB,EAAMI,MAAQ5I,KAAKqK,SAAU,MACtCN,EAAWvB,GACXwB,EAASH,IAaP,UACE,uBACEL,MAAOhB,EAAMI,MACba,SAAU,SAACC,GACTO,EAASP,EAAMC,OAAOH,MAAO,SAC7BS,EAASP,EAAMC,OAAOH,MAAQxJ,KAAKqK,SAAU,OAE/C/B,KAAK,OACLgC,YAAY,+BACZC,UAAQ,IAGV,cAAC,EAAD,CACEf,MAAOhB,EAAMA,MACbxH,QAASgI,EACTvH,MAAO,sBACP8H,YAAa,SAACjB,GAAD,OAAU2B,EAAS3B,EAAM,YAGxC,cAAC,EAAD,CACEkB,MAAOhB,EAAM3G,MACbb,QAASiI,EACTxH,MAAO,mBACP8H,YAAa,SAACjB,GAAD,OAAU2B,EAAS3B,EAAM,YAGxC,cAAC,EAAD,CACEkB,MAAOhB,EAAMvJ,EACb+B,QAAyB,iBAAhBwH,EAAMA,MAA2BY,EAAcD,EACxD1H,MAAO,qBACP8H,YAAa,SAACjB,GAAD,OAAU2B,EAAS3B,EAAM,QAGvB,iBAAhBE,EAAMA,OACL,cAAC,EAAD,CACEgB,MAAOhB,EAAMzJ,EACbiC,QAASoI,EACT3H,MAAO,qBACP8H,YAAa,SAACjB,GAAD,OAAU2B,EAAS3B,EAAM,QAIzB,iBAAhBE,EAAMA,OACL,cAAC,EAAD,CACEgB,MAAOhB,EAAMrH,EACbH,QAASoI,EACT3H,MAAO,qBACP8H,YAAa,SAACjB,GAAD,OAAU2B,EAAS3B,EAAM,QAI1C,sD,gBCzEOkC,G,OAfA,SAAC,GAA2B,IAAzBnL,EAAwB,EAAxBA,KAChB,OACE,sBAAKV,UAAU,SAAf,UACE,uBAAOA,UAAU,UAAjB,SACE,qBAAKA,UAAU,gBAAf,SACE,4BAAIU,EAAKC,KAAI,SAACC,GAAD,gBAAaA,EAAK0B,KAAlB,cAA4B1B,EAAKkL,OAAjC,gBAGjB,qBAAK9L,UAAU,SAAf,SACE,wDCeO+L,G,OAxBA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,WACtB,OACE,sBAAKjM,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,mBACEkM,KAAK,+EACLlM,UAAU,UACVgL,OAAO,SACPmB,IAAI,aAJN,eAQA,mDAEF,6BAAKH,IACL,sBAAKhM,UAAU,SAAf,UACE,qBAAKA,UAAU,YAAYoJ,QAAS,kBAAM6C,EAAW,UACrD,qBAAKjM,UAAU,aAAaoJ,QAAS,kBAAM6C,EAAW,WACtD,qBAAKjM,UAAU,eAAeoJ,QAAS,kBAAM6C,EAAW,qB,iBCwNjDG,EA3Nb,WAAYC,EAA2B3L,GAAe,IAAD,gCAlBrD2L,QAkBqD,OAjBrDC,SAiBqD,OAhBrDvM,WAgBqD,OAfrDO,OAeqD,OAdrDiM,YAcqD,OAbrDC,cAaqD,OAZrDC,cAYqD,OAXrDC,YAWqD,OAVrDC,WAUqD,OATrDC,WASqD,OARrDC,WAQqD,OAPrDC,WAOqD,OANrDC,YAMqD,OALrDC,WAKqD,OAJrDC,WAIqD,OAHrDlK,OAGqD,OAFrDiJ,UAEqD,OAsHrDkB,OAAS,SAACxM,EAAcyM,EAAmBC,EAAmBC,GAE5D3M,EAAOA,EAAKqH,MAAK,SAAC/G,EAAGE,GACnB,MAAsB,eAAlBmM,EACKrF,aACJhH,EAAEmM,IAA4BnM,EAAEoM,IAChClM,EAAEiM,IAA4BjM,EAAEkM,IAG5BpF,YAAWhH,EAAEqM,GAA8BnM,EAAEmM,OAKxD,EAAKV,MAAMrM,GAAE,SAACoB,GAAD,OAAa,EAAKpB,GAAGoB,EAAEyL,OACpC,EAAKP,MAAMtM,GAAE,SAACoB,GAAD,OAAa,EAAKpB,GAAGoB,EAAE0L,OAGpC,EAAKV,OACFxD,IAAG,SAACxH,GAAD,OAAa,EAAKpB,GAAGoB,EAAEyL,OAC1B1J,IAAG,SAAC/B,GAAD,OAAa,EAAKpB,GAAGoB,EAAE0L,OAC1BhN,GAAE,SAACsB,EAAGoC,GAAJ,OAAU,GAAKA,EAAI,MAGxB,EAAK+I,MAAMS,MAAM5M,GAAM6M,aAAaC,SAAS,KAAMC,KAAK,IAAK,EAAKd,OAClE,EAAKG,MAAMQ,MAAM5M,GAAM6M,aAAaC,SAAS,KAAMC,KAAK,IAAK,EAAKb,OAClE,EAAKG,OAAOO,MAAM5M,GAAM6M,aAAaC,SAAS,KAAMC,KAAK,IAAK,EAAKf,QAGnE,EAAKH,OACF7L,KAAKA,GAAM,SAACgB,GAAD,OAAOA,EAAEY,KAAOZ,EAAEoK,UAC7ByB,aACAC,SAAS,KACTC,KAAK,aAAa,SAAC/L,EAASoC,GAAV,4BAAuC,GAAKA,EAA5C,QAGrB,EAAKkI,KAAKA,MAAK,SAACtK,GACd,IAAIgE,EAAU,EAAK3F,MAAMmD,MAAQ,GAC7B0C,EAAc,GAUlB,OAPEA,EADoB,SAAlByH,EACI3L,EAAEY,KACmB,eAAlB+K,EACN,UAAM,EAAKtK,GAAGrB,EAAEyL,IAA4BzL,EAAE0L,IAA9C,mBAA6E1L,EAAEY,MAE/E,UAAMZ,EAAE2L,GAAR,mBAA0C3L,EAAEY,OAGtCnB,OAASuE,EAAb,UAA0BE,EAAIC,UAAU,EAAGH,GAA3C,OAA2DE,KAIpE,EAAK4G,SACF9L,KAAKA,GAAM,SAACgB,GAAD,OAAOA,EAAEY,KAAOZ,EAAEoK,UAC7ByB,aACAC,SAAS,KACTC,KAAK,MAAM,SAAC/L,GAAD,OAAa,EAAKpB,GAAGoB,EAAEyL,OAGrC,EAAKV,SACF/L,KAAKA,GAAM,SAACgB,GAAD,OAAOA,EAAEY,KAAOZ,EAAEoK,UAC7ByB,aACAC,SAAS,KACTC,KAAK,MAAM,SAAC/L,GAAD,OAAa,EAAKpB,GAAGoB,EAAE0L,OAGrC,EAAKJ,MACFtM,KAAKA,GAAM,SAACgB,GAAD,OAAOA,EAAEY,KAAOZ,EAAEoK,UAC7BE,MAAK,SAACtK,GAAD,OAAa,EAAKqB,GAAGrB,EAAEyL,OAC5BI,aACAC,SAAS,KACTC,KAAK,KAAK,SAAC/L,GAEV,OADcA,EAAEyL,IAA4BzL,EAAE0L,GAChC,EACV,EAAK9M,GAAGoB,EAAEyL,IAA4B,GACtC,EAAK7M,GAAGoB,EAAEyL,IAA4B,MAE3CjN,MAAM,eAAe,SAACwB,GAErB,OADcA,EAAEyL,IAA4BzL,EAAE0L,GAChC,EAAI,QAAU,SAIhC,EAAKH,MACFvM,KAAKA,GAAM,SAACgB,GAAD,OAAOA,EAAEY,KAAOZ,EAAEoK,UAC7BE,MAAK,SAACtK,GAAD,OAAa,EAAKqB,GAAGrB,EAAE0L,OAC5BG,aACAC,SAAS,KACTC,KAAK,KAAK,SAAC/L,GAEV,OADcA,EAAEyL,IAA4BzL,EAAE0L,GAChC,EACV,EAAK9M,GAAGoB,EAAE0L,IAA4B,GACtC,EAAK9M,GAAGoB,EAAE0L,IAA4B,MAE3ClN,MAAM,eAAe,SAACwB,GAErB,OADcA,EAAEyL,IAA4BzL,EAAE0L,GAChC,EAAI,MAAQ,YApN9BM,KAAKrB,GAAKA,EACVsB,YAAOtB,GAAIuB,KAAK,IAGhBF,KAAK3N,MAAQ,CACXoD,OAAQ,CACNhD,IAAK,EACLiD,MAAO,EACPG,OAAQ,EACRlD,KAAM,GAER6C,MAAOwK,KAAKrB,GAAKqB,KAAKrB,GAAGwB,YAAc,EACvCvK,OAAQ,GAAK5C,EAAKS,QAIpBuM,KAAK3K,EAAIC,YAAO,OAGhB0K,KAAKpB,IAAMqB,YAAOtB,GACfyB,OAAO,OACPL,KAAK,QAFG,UAESC,KAAK3N,MAAMmD,MAAQwK,KAAK3N,MAAMoD,OAAO9C,KAAOqN,KAAK3N,MAAMoD,OAAOC,QAC/EqK,KAAK,SAHG,UAGUC,KAAK3N,MAAMuD,OAASoK,KAAK3N,MAAMoD,OAAOhD,IAAMuN,KAAK3N,MAAMoD,OAAOI,SAChFuK,OAAO,KACPL,KAAK,YALG,oBAKuBC,KAAK3N,MAAMoD,OAAO9C,KALzC,YAKiDqN,KAAK3N,MAAMoD,OAAOhD,IALnE,MAQXuN,KAAKpN,EAAI2E,cACNC,OAAO,CAAC,EAAG,IACXC,MAAM,CAACuI,KAAK3N,MAAMmD,MAAQ,IAAKwK,KAAK3N,MAAMmD,MAAQ,MAGrDwK,KAAKhB,OAASqB,cACX7E,GAAGwE,KAAK3N,MAAMmD,MAAQ,KACtBO,GAAGiK,KAAK3N,MAAMmD,MAAQ,KACtB9C,GAAE,SAACsB,EAAGoC,GAAJ,OAAU,GAAKA,EAAI,MAGxB4J,KAAKf,MAAQqB,cACV1N,EAAEoN,KAAK3N,MAAMmD,MAAQ,KACrB9C,GAAE,SAACsB,EAAGoC,GAAJ,OAAU,GAAKA,EAAI,MAGxB4J,KAAKd,MAAQoB,cACV1N,EAAEoN,KAAK3N,MAAMmD,MAAQ,KACrB9C,GAAE,SAACsB,EAAGoC,GAAJ,OAAU,GAAKA,EAAI,MAGxB4J,KAAKb,MAAQa,KAAKpB,IAAIwB,OAAO,QAAQL,KAAK,QAAS,UAAUH,MAAM5M,GAAM+M,KAAK,IAAKC,KAAKf,OACxFe,KAAKZ,MAAQY,KAAKpB,IAAIwB,OAAO,QAAQL,KAAK,QAAS,UAAUH,MAAM5M,GAAM+M,KAAK,IAAKC,KAAKd,OAGxFc,KAAKX,OAASW,KAAKpB,IAChBwB,OAAO,QACPL,KAAK,QAAS,WACdH,MAAM5M,GACN+M,KAAK,IAAKC,KAAKhB,QAGlBgB,KAAKnB,OAASmB,KAAKpB,IAChB2B,UAAU,UACVvN,KAAKA,GACLwN,KAAK,KACLT,KAAK,QAAS,cACdA,KAAK,aAAa,SAAC/L,EAASoC,GAAV,4BAAuC,GAAKA,EAA5C,QAGrB4J,KAAKnB,OACFuB,OAAO,QACPL,KAAK,QAAS,WACdA,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAASC,KAAK3N,MAAMmD,OACzBuK,KAAK,SAAU,IAGlBC,KAAK1B,KAAO0B,KAAKnB,OACduB,OAAO,QACPL,KAAK,QAAS,aACdA,KAAK,IAAK,IACVA,KAAK,IAAK,IACVzB,KAAK,IAGR0B,KAAKlB,SAAWkB,KAAKnB,OAClBuB,OAAO,UACPL,KAAK,QAAS,YACdA,KAAK,IAAK,IACVA,KAAK,KAAM,IACXA,KAAK,KAAMC,KAAK3N,MAAMmD,MAAQ,KAGjCwK,KAAKjB,SAAWiB,KAAKnB,OAClBuB,OAAO,UACPL,KAAK,QAAS,YACdA,KAAK,IAAK,GACVA,KAAK,KAAM,IACXA,KAAK,KAAMC,KAAK3N,MAAMmD,MAAQ,KAGjCwK,KAAKV,MAAQU,KAAKnB,OACfuB,OAAO,QACPL,KAAK,QAAS,eACdA,KAAK,IAAKC,KAAK3N,MAAMmD,MAAQ,KAC7BuK,KAAK,IAAK,IACVzB,KAAK,IAGR0B,KAAKT,MAAQS,KAAKnB,OACfuB,OAAO,QACPL,KAAK,QAAS,eACdA,KAAK,IAAKC,KAAK3N,MAAMmD,MAAQ,KAC7BuK,KAAK,IAAK,IACVzB,KAAK,KClIRmC,GAAW,GA6EAC,GAvEE,SAAC,GAA6B,IAA3B1N,EAA0B,EAA1BA,KAA0B,EACVmE,mBAAS,gBADC,mBACrCsI,EADqC,KAC1BkB,EAD0B,OAEVxJ,mBAAS,oBAFC,mBAErCuI,EAFqC,KAE1BkB,EAF0B,OAGFzJ,mBAAS,cAHP,mBAGrCwI,EAHqC,KAGtBkB,EAHsB,KAItClC,EAAKmC,iBAAuB,MA2BlC,OAzBAC,qBAAU,WACRN,GAAM,IAAI/B,EAAMC,EAAGqC,QAAShO,KAC3B,CAACA,IAEJ+N,qBAAU,WACRN,IAAOA,GAAIjB,OAAOxM,EAAMyM,EAAWC,EAAWC,KAC7C,CAACA,EAAeF,EAAWC,EAAW1M,IAEzC+N,qBAAU,WACR,IAAIE,EACEC,EAAe,WACnBC,aAAaF,GACbA,EAAcG,YAAW,WACvBX,GAAM,IACNA,GAAM,IAAI/B,EAAMC,EAAGqC,QAAShO,IACxBwM,OAAOxM,EAAMyM,EAAWC,EAAWC,KACtC,MAIL,OAFA0B,OAAOC,iBAAiB,SAAUJ,GAE3B,WACLG,OAAOE,oBAAoB,SAAUL,MAEtC,CAACvB,EAAeF,EAAWC,EAAW1M,IAGvC,sBAAKV,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACE8C,MAAO,WACP8H,YAAa,SAACsE,GACZX,EAAiBW,IAEnBrE,MAAOwC,EACPhL,QAAO,CAAG,cAAH,mBAAoB8M,SAI/B,sBAAKnP,UAAU,oBAAf,UACE,cAAC,EAAD,CACE8C,MAAO,GACP8H,YAAa,SAACsE,GACZb,EAAaa,IAEfrE,MAAOsC,EACP9K,QAASqI,IAGX,cAAC,EAAD,CACE5H,MAAO,GACP8H,YAAa,SAACsE,GACZZ,EAAaY,IAEfrE,MAAOuC,EACP/K,QAASqI,UAKf,qBAAK1K,UAAU,gBAAgBoP,IAAK/C,QCnEpCgD,GAAkB3O,EAClB4O,GAA4CC,EACrCJ,GAAiBK,OAAOL,KAAKE,GAAQ,IAmCnCI,GAjCH,WAAO,IAAD,EACU5K,mBAASyK,IADnB,mBACTnF,EADS,KACFuF,EADE,OAEgB7K,mBAAiB,IAFjC,mBAETR,EAFS,KAECuG,EAFD,OAGU/F,mBAAS0F,EAAOlJ,KAAKsO,MAAMtO,KAAKqK,SAAWnB,EAAOpJ,UAH5D,mBAGTyO,EAHS,KAGFC,EAHE,KAKhB,OACE,sBAAK7P,UAAS,cAAS4P,GAAvB,UACE,iCACE,cAAC,EAAD,CAAQ5D,KAAM,wCAAyCC,WAAY4D,IACnE,cAAC,GAAD,CAAUnP,KAAM2O,KAChB,cAAC,EAAD,CACElF,MAAOA,EACPzJ,KAAM2O,GACNjL,SAAU,SAAC0L,GAAD,OAAWlF,EAAYkF,IACjCzL,SAAUA,EACV2F,SAAU,SAACC,GACT,IAAM8F,EAAW5F,EAAMlJ,QAAO,SAAC8I,GAAD,OAAUA,EAAKE,QAAUA,KACvDyF,EAASK,IAPb,SAUE,cAAC,EAAD,CACE3E,WAAY,SAACvB,GACX,IAAMkG,EAAQ,sBAAO5F,GAAP,CAAcN,IAC5B6F,EAASK,WAKjB,cAAC,EAAD,CAAQrP,KAAM2O,SCxCpBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.1df3de30.chunk.js","sourcesContent":["import './styles.css'\nimport { tTipAttrs } from '../../utils/interfaces'\n\ninterface tooltipProps {\n  attrs: tTipAttrs\n}\n\nconst Tooltip = ({ attrs }: tooltipProps) => {\n  return (\n    <div className={`tooltip ${attrs.show}`} style={{ top: attrs.y, left: attrs.x }}>\n      {attrs.content}\n    </div>\n  )\n}\n\nexport default Tooltip\n","import { group, ScaleBand, ScaleLinear } from 'd3'\nimport { Bucket, DashboardItemDefinition, Song, tTipAttrs } from './interfaces'\n\nexport const getValues = (category: string, data: Song[]): (number | string)[] => {\n  return data.map((song) => song[category as keyof Song])\n}\n\nexport const getNumericValues = (category: string, data: Song[]): number[] => {\n  return data.map((song) => +song[category as keyof Song])\n}\n\nexport const getUniqueValues = (category: string, data: Song[]): (number | string)[] => {\n  return [...new Set(getValues(category, data))]\n}\n\nexport const getMostFrequent = (category: string, data: Song[]): string | number => {\n  const values = getValues(category, data)\n  const map = values.map((a) => values.filter((b) => a === b).length)\n  return values[map.indexOf(Math.max.apply(null, map))]\n}\n\nexport const getBuckets = (category: string, data: Song[]): Bucket[] => {\n  const map = group(data, (d) => d[category as keyof Song])\n  const buckets: Bucket[] = Array.from(map, ([name, value]) => ({ name: name, children: value }))\n  return buckets\n}\n\nexport const isLinearScale = (\n  scale: ScaleLinear<number, number, never> | ScaleBand<string>\n): scale is ScaleLinear<number, number, never> => {\n  return (scale as ScaleLinear<number, number, never>).ticks ? true : false\n}\n\nexport const isBucket = (x: Song | Bucket): x is Bucket => {\n  return (x as Bucket).children ? true : false\n}\n\nexport const mouseOver = (\n  e: React.MouseEvent,\n  d: Song | Bucket,\n  setattrs: (value: React.SetStateAction<tTipAttrs>) => void,\n  options: DashboardItemDefinition\n) => {\n  let content = ''\n  if (isBucket(d)) {\n    content = `${options.x}: ${d.name}\n    Songs: ${d.children.length}`\n  } else {\n    content = `Song: ${d.Name}\n  ${options.x}: ${d[options.x as keyof Song]}`\n    if (options.y) {\n      content = content.concat(`\n    ${options.y}: ${d[options.y as keyof Song]}`)\n    }\n\n    if (options.z) {\n      content = content.concat(`\n    ${options.z}: ${d[options.z as keyof Song]}`)\n    }\n  }\n\n  setattrs({\n    x: +e.clientX + 25,\n    y: +e.clientY - 25,\n    show: true,\n    content: content,\n  })\n}\n\nexport const mouseOut = (setattrs: (value: React.SetStateAction<tTipAttrs>) => void) => {\n  setattrs((prevState) => ({\n    ...prevState,\n    show: false,\n  }))\n}\n","import { ScaleLinear } from 'd3-scale'\nimport { format } from 'd3'\nimport { ChartAttrs } from '../../utils/interfaces'\nimport './styles.css'\n\ninterface AxisProps {\n  scale: ScaleLinear<number, number, never>\n  attrs: ChartAttrs\n  label: string\n}\n\nconst LeftAxis = ({ scale, attrs, label }: AxisProps) => {\n  const f = format(',')\n  const calcW = attrs.width - attrs.margin.right - attrs.margin.left\n  const calcH = attrs.height - attrs.margin.bottom - attrs.margin.top\n  return (\n    <g className=\"axis y-axis\" transform={`translate(0, 0)`}>\n      <line x1={0} y1={0} x2={0} y2={attrs.height - attrs.margin.bottom}></line>\n      <text className=\"label\" y={-attrs.margin.left} x={-(calcH / 2)}>\n        {label}\n      </text>\n      {scale.ticks().map((tick, i) => (\n        <g key={i} transform={`translate(0, ${scale(tick)})`}>\n          <line x1={calcW} x2={-5} className=\"tick\"></line>\n          <text x={-5}>{f(tick)}</text>\n        </g>\n      ))}\n    </g>\n  )\n}\n\nexport default LeftAxis\n","import { ScaleBand, ScaleLinear } from 'd3-scale'\nimport { format } from 'd3'\nimport { Bucket, ChartAttrs } from '../../utils/interfaces'\nimport { isLinearScale } from '../../utils/utils'\nimport './styles.css'\n\ninterface AxisProps {\n  scale: ScaleLinear<number, number, never> | ScaleBand<string>\n  buckets: Bucket[]\n  attrs: ChartAttrs\n  label: string\n}\n\nconst BottomAxis = ({ scale, buckets, attrs, label }: AxisProps) => {\n  const f = format(',')\n  const calcW = attrs.width - attrs.margin.right - attrs.margin.left\n  return (\n    <g className=\"axis x-axis\" transform={`translate(0, ${attrs.height - attrs.margin.bottom})`}>\n      <line x1={0} y1={0} x2={calcW} y2={0}></line>\n      <text className=\"label\" x={calcW / 2} y={attrs.margin.bottom - 15}>\n        {label}\n      </text>\n      {isLinearScale(scale)\n        ? scale.ticks().map((tick, i) => (\n            <g key={i} transform={`translate(${scale(tick)}, 0)`}>\n              <text x={-10}>{f(tick)}</text>\n            </g>\n          ))\n        : buckets.map((d, i) => (\n            <g key={i} transform={`translate(${scale.step() * (i + 1)}, 0)`}>\n              <text x={-8} y={-scale.bandwidth() / 2}>\n                {scale.bandwidth() > 10 ? d.name : ''}\n              </text>\n            </g>\n          ))}\n    </g>\n  )\n}\n\nexport default BottomAxis\n","import { ScaleBand, ScaleLinear } from 'd3'\nimport { Bucket, DashboardItemDefinition, Song, tTipAttrs } from '../../utils/interfaces'\nimport { mouseOut, mouseOver } from '../../utils/utils'\n\ninterface BarsProps {\n  y: ScaleLinear<number, number, never>\n  x: ScaleBand<string>\n  buckets: Bucket[]\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n  setTTipAttrs: (value: React.SetStateAction<tTipAttrs>) => void\n  options: DashboardItemDefinition\n}\n\nconst Bars = ({ x, y, buckets, onSelect, selected, options, setTTipAttrs }: BarsProps) => {\n  return (\n    <g transform={`translate(0, 0)`}>\n      {buckets.map((b, i) => (\n        <g className=\"group-container\" key={i} transform={`translate(${x.step() * (i + 1)}, 0)`}>\n          {b.children.map((d, i) => (\n            <rect\n              key={i}\n              className={`single bar ${selected.includes(d)}`}\n              width={x.bandwidth()}\n              height={y(0) - y(1)}\n              x={-x.bandwidth()}\n              y={y(i + 1)}\n            ></rect>\n          ))}\n          <rect\n            className={`bucket bar`}\n            width={x.bandwidth()}\n            height={y(0) - y(b.children.length)}\n            x={-x.bandwidth()}\n            y={y(b.children.length)}\n            onMouseEnter={(e) => {\n              mouseOver(e, b, setTTipAttrs, options)\n              onSelect(b.children as Song[])\n            }}\n            onMouseLeave={() => {\n              mouseOut(setTTipAttrs)\n              onSelect([])\n            }}\n          ></rect>\n        </g>\n      ))}\n    </g>\n  )\n}\n\nexport default Bars\n","import { ChartAttrs } from '../../utils/interfaces'\n\ninterface ChartContainerProps {\n  attrs: ChartAttrs\n  children: React.ReactChild | React.ReactChild[]\n}\n\nconst ChartContainer = ({ attrs, children }: ChartContainerProps) => {\n  return (\n    <svg viewBox={`0 0 ${attrs.width} ${attrs.height}`}>\n      <g transform={`translate(${attrs.margin.left},${attrs.margin.top})`}>{children}</g>\n    </svg>\n  )\n}\n\nexport default ChartContainer\n","import { useState } from 'react'\nimport { ChartAttrs, chartProps } from '../../utils/interfaces'\nimport { scaleLinear, max, scaleBand } from 'd3'\nimport Tooltip from '../../components/Tooltip'\nimport { getBuckets } from '../../utils/utils'\nimport LeftAxis from '../LeftAxis/Index'\nimport BottomAxis from '../BottomAxis/Index'\nimport Bars from './Bars'\nimport ChartContainer from '../ChartContainer'\n\nconst BarChart = ({ options, data, onSelect, selected }: chartProps) => {\n  const [tTipAttrs, setTTipAttrs] = useState({\n    x: 0,\n    y: 0,\n    show: false,\n    content: '',\n  })\n\n  const chartAttrs: ChartAttrs = {\n    margin: {\n      top: 15,\n      right: 15,\n      bottom: 210,\n      left: 80,\n    },\n    width: 1000,\n    height: 700,\n  }\n\n  const buckets = getBuckets(options.x, data)\n  const maxData = max(buckets, (d) => d.children.length)\n\n  const y = scaleLinear()\n    .domain([0, maxData ? maxData : 0])\n    .range([chartAttrs.height - chartAttrs.margin.bottom, chartAttrs.margin.top])\n\n  const x = scaleBand()\n    .domain(buckets.map((d) => String(d.name)))\n    .range([chartAttrs.margin.left, chartAttrs.width - chartAttrs.margin.right])\n    .padding(0.2)\n\n  return (\n    <>\n      <ChartContainer attrs={chartAttrs}>\n        <LeftAxis scale={y} attrs={chartAttrs} label=\"# of songs\" />\n        <BottomAxis scale={x} attrs={chartAttrs} buckets={buckets} label={options.x} />\n        <Bars\n          x={x}\n          y={y}\n          buckets={buckets}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n      </ChartContainer>\n      <Tooltip attrs={tTipAttrs} />\n    </>\n  )\n}\n\nexport default BarChart\n","import { HierarchyCircularNode } from 'd3'\nimport { Bucket, DashboardItemDefinition, Song, tTipAttrs } from '../../utils/interfaces'\nimport { mouseOut, mouseOver } from '../../utils/utils'\n\ninterface PackCirclesProps {\n  circles: HierarchyCircularNode<unknown>[] | undefined\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n  setTTipAttrs: (value: React.SetStateAction<tTipAttrs>) => void\n  options: DashboardItemDefinition\n}\n\nconst PackCircles = ({ circles, onSelect, selected, options, setTTipAttrs }: PackCirclesProps) => {\n  return (\n    <>\n      {circles &&\n        circles.map((circle, i) => {\n          let maxChar = circle.r / 10\n          let txt: string = String((circle.data as Bucket).name)\n          txt = txt.length > maxChar ? txt.substring(0, maxChar) : txt\n          return (\n            <g className=\"group-container pack\" key={i}>\n              <circle\n                className=\"bucket\"\n                r={circle.r}\n                transform={`translate(${circle.x}, ${circle.y})`}\n                onMouseEnter={(e) => {\n                  mouseOver(e, circle.data as Song, setTTipAttrs, options)\n                  onSelect((circle.data as Bucket).children)\n                }}\n                onMouseLeave={() => {\n                  mouseOut(setTTipAttrs)\n                  onSelect([])\n                }}\n              ></circle>\n              {circle.children &&\n                circle.children.map((child, i) => (\n                  <circle\n                    key={i}\n                    r={child.r}\n                    className={`single ${selected.includes(child.data as Song)}`}\n                    transform={`translate(${child.x}, ${child.y})`}\n                  ></circle>\n                ))}\n              <text className=\"pack-label label\" x={circle.x} y={circle.y}>\n                {txt}\n              </text>\n            </g>\n          )\n        })}\n    </>\n  )\n}\n\nexport default PackCircles\n","import { useState } from 'react'\nimport { Bucket, ChartAttrs, chartProps } from '../../utils/interfaces'\nimport Tooltip from '../../components/Tooltip'\nimport { getBuckets } from '../../utils/utils'\nimport { hierarchy, pack } from 'd3'\nimport './styles.css'\nimport PackCircles from './PackCircles'\nimport ChartContainer from '../ChartContainer'\n\nconst CirclePack = ({ options, data, onSelect, selected }: chartProps) => {\n  const [tTipAttrs, setTTipAttrs] = useState({\n    x: 0,\n    y: 0,\n    show: false,\n    content: '',\n  })\n\n  const chartAttrs: ChartAttrs = {\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n    width: 1000,\n    height: 700,\n  }\n\n  const buckets = getBuckets(options.x, data)\n  const root: { name: string; children: Bucket[] } = { name: 'root', children: buckets }\n  const circlePack = pack().size([chartAttrs.width, chartAttrs.height]).padding(8)\n  const nodes = hierarchy(root).sum((d) => (d.children ? 0 : 1))\n  const circles = circlePack(nodes).children\n\n  return (\n    <>\n      <ChartContainer attrs={chartAttrs}>\n        <PackCircles\n          circles={circles}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n      </ChartContainer>\n      <Tooltip attrs={tTipAttrs} />\n    </>\n  )\n}\n\nexport default CirclePack\n","import { format } from 'd3'\nimport { chartProps } from '../../utils/interfaces'\nimport { getUniqueValues } from '../../utils/utils'\n\nconst Number = ({ options, data }: chartProps) => {\n  const f = format(',')\n  const values = getUniqueValues(options.x, data)\n  return <h2 className=\"viz-number\">{f(values.length)}</h2>\n}\n\nexport default Number\n","import { Arc, DefaultArcObject } from 'd3-shape'\nimport { ChartAttrs, DashboardItemDefinition, Song, tTipAttrs } from '../../utils/interfaces'\nimport { mouseOut, mouseOver } from '../../utils/utils'\n\ninterface ArcsProps {\n  arc: Arc<any, DefaultArcObject>\n  data: any[]\n  attrs: ChartAttrs\n  radius: number\n  isBucket: boolean\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n  setTTipAttrs: (value: React.SetStateAction<tTipAttrs>) => void\n  options: DashboardItemDefinition\n}\n\nconst Arcs = ({\n  data,\n  arc,\n  radius,\n  attrs,\n  isBucket,\n  onSelect,\n  selected,\n  options,\n  setTTipAttrs,\n}: ArcsProps) => {\n  return (\n    <g className={`pie-container`} transform={`translate(${attrs.width / 2},${attrs.height / 2})`}>\n      {data.map((b, i, arr) => {\n        const step = isBucket ? b.children.length : 1\n        const totalBCount = arr.reduce(\n          (acc, b) => (isBucket ? acc + b.children.length : acc + 1),\n          0\n        )\n        const prevBCount = arr\n          .slice(0, i)\n          .reduce((acc, b) => (isBucket ? acc + b.children.length : acc + 1), 0)\n\n        const startAngle: number = (Math.PI * 2 * prevBCount) / totalBCount\n        const endAngle: number = (Math.PI * 2 * (prevBCount + step)) / totalBCount\n        const midAngle = (startAngle + endAngle) / 2 + (3 * Math.PI) / 2\n        const pos = [radius * 1.1 * Math.cos(midAngle), radius * 1.1 * Math.sin(midAngle)]\n        const labelAnchor = (startAngle + endAngle) / 2 < Math.PI ? 'start' : 'end'\n\n        return (\n          <g key={i}>\n            <path\n              className={`${isBucket ? 'bucket' : 'single'} ${selected.includes(b)}`}\n              onMouseEnter={(e) => {\n                mouseOver(e, b, setTTipAttrs, options)\n                if (isBucket) onSelect(b.children)\n              }}\n              onMouseLeave={() => {\n                mouseOut(setTTipAttrs)\n                onSelect([])\n              }}\n              d={`${arc({\n                innerRadius: radius * 0.5,\n                outerRadius: radius,\n                startAngle: startAngle,\n                endAngle: endAngle,\n              })}`}\n            />\n\n            {isBucket && endAngle - startAngle > Math.PI / 30 && (\n              <text className=\"label\" style={{ textAnchor: labelAnchor }} x={pos[0]} y={pos[1]}>\n                {b.name}\n              </text>\n            )}\n          </g>\n        )\n      })}\n    </g>\n  )\n}\n\nexport default Arcs\n","import { useState } from 'react'\nimport { ChartAttrs, chartProps, Song } from '../../utils/interfaces'\nimport { arc, descending } from 'd3'\nimport Tooltip from '../../components/Tooltip'\nimport { getBuckets } from '../../utils/utils'\nimport Arcs from './Arcs'\nimport './styles.css'\nimport ChartContainer from '../ChartContainer'\n\nconst PieChart = ({ options, data, onSelect, selected }: chartProps) => {\n  const [tTipAttrs, setTTipAttrs] = useState({\n    x: 0,\n    y: 0,\n    show: false,\n    content: '',\n  })\n\n  const chartAttrs: ChartAttrs = {\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n    width: 1000,\n    height: 700,\n  }\n\n  const buckets = getBuckets(options.x, data)\n  const radius = chartAttrs.height * 0.4\n  const a = arc()\n\n  data.sort((a, b) => {\n    return descending(a[options.x as keyof Song], b[options.x as keyof Song])\n  })\n\n  return (\n    <>\n      <ChartContainer attrs={chartAttrs}>\n        <Arcs\n          data={data}\n          arc={a}\n          radius={radius}\n          attrs={chartAttrs}\n          isBucket={false}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n        <Arcs\n          data={buckets}\n          arc={a}\n          radius={radius}\n          attrs={chartAttrs}\n          isBucket={true}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n      </ChartContainer>\n      <Tooltip attrs={tTipAttrs} />\n    </>\n  )\n}\n\nexport default PieChart\n","import { ScaleLinear } from 'd3'\nimport { DashboardItemDefinition, Song, tTipAttrs } from '../../utils/interfaces'\nimport { mouseOut, mouseOver } from '../../utils/utils'\n\ninterface BarsProps {\n  y: ScaleLinear<number, number, never>\n  x: ScaleLinear<number, number, never>\n  r: ScaleLinear<number, number, never>\n  data: Song[]\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n  setTTipAttrs: (value: React.SetStateAction<tTipAttrs>) => void\n  options: DashboardItemDefinition\n}\n\nconst Circles = ({ x, y, r, data, onSelect, selected, options, setTTipAttrs }: BarsProps) => {\n  return (\n    <g className=\"scatter-container\" transform={`translate(0, 0)`}>\n      {data.map((d, i) => (\n        <g\n          key={i}\n          transform={`translate(${x(+d[options.x as keyof Song])}, ${y(\n            +d[options.y as keyof Song]\n          )})`}\n        >\n          <circle\n            className={`circle ${selected.includes(d)}`}\n            r={r(+d[options.z as keyof Song])}\n            onMouseEnter={(e) => {\n              mouseOver(e, d, setTTipAttrs, options)\n              onSelect([d])\n            }}\n            onMouseLeave={() => {\n              mouseOut(setTTipAttrs)\n              onSelect([])\n            }}\n          ></circle>\n        </g>\n      ))}\n    </g>\n  )\n}\n\nexport default Circles\n","import { useState } from 'react'\nimport { ChartAttrs, chartProps } from '../../utils/interfaces'\nimport { scaleLinear, max, min } from 'd3'\nimport Tooltip from '../../components/Tooltip'\nimport { getNumericValues } from '../../utils/utils'\nimport LeftAxis from '../LeftAxis/Index'\nimport BottomAxis from '../BottomAxis/Index'\nimport Circles from './Circles'\nimport './styles.css'\nimport ChartContainer from '../ChartContainer'\n\nconst ScatterPlot = ({ options, data, onSelect, selected }: chartProps) => {\n  const [tTipAttrs, setTTipAttrs] = useState({\n    x: 0,\n    y: 0,\n    show: false,\n    content: '',\n  })\n\n  const valuesX = getNumericValues(options.x, data)\n  const valuesY = getNumericValues(options.y, data)\n  const valuesZ = getNumericValues(options.z, data)\n\n  const chartAttrs: ChartAttrs = {\n    margin: {\n      top: 15,\n      right: 20,\n      bottom: 120,\n      left: 100,\n    },\n    width: 1000,\n    height: 700,\n  }\n\n  const maxDataX = max(valuesX)\n  const maxDataY = max(valuesY)\n  const maxDataZ = max(valuesZ)\n\n  const minDataX = min(valuesX)\n  const minDataY = min(valuesY)\n  const minDataZ = min(valuesZ)\n\n  const y = scaleLinear()\n    .domain([minDataY ? minDataY : 0, maxDataY ? maxDataY : 0])\n    .range([chartAttrs.height - chartAttrs.margin.bottom, chartAttrs.margin.top])\n    .nice()\n\n  const x = scaleLinear()\n    .domain([minDataX ? minDataX : 0, maxDataX ? maxDataX : 0])\n    .range([0, chartAttrs.width - chartAttrs.margin.right - chartAttrs.margin.left])\n    .nice()\n\n  const r = scaleLinear()\n    .domain([minDataZ ? minDataZ : 0, maxDataZ ? maxDataZ : 0])\n    .range([5, 20])\n\n  return (\n    <>\n      <ChartContainer attrs={chartAttrs}>\n        <LeftAxis scale={y} attrs={chartAttrs} label={options.y} />\n        <BottomAxis scale={x} attrs={chartAttrs} buckets={[]} label={options.x} />\n        <Circles\n          x={x}\n          y={y}\n          r={r}\n          data={data}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n      </ChartContainer>\n      <Tooltip attrs={tTipAttrs} />\n    </>\n  )\n}\n\nexport default ScatterPlot\n","import { chartProps } from '../../utils/interfaces'\nimport { getMostFrequent } from '../../utils/utils'\n\nconst Text = ({ options, data }: chartProps) => {\n  return <h2 className=\"viz-number\">{getMostFrequent(options.x, data)}</h2>\n}\n\nexport default Text\n","import { HierarchyRectangularNode } from 'd3'\nimport { Bucket, DashboardItemDefinition, Song, tTipAttrs } from '../../utils/interfaces'\nimport { mouseOut, mouseOver } from '../../utils/utils'\n\ninterface TreeRectsProps {\n  rects: HierarchyRectangularNode<unknown>[] | undefined\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n  setTTipAttrs: (value: React.SetStateAction<tTipAttrs>) => void\n  options: DashboardItemDefinition\n}\n\nconst TreeRects = ({ rects, onSelect, selected, options, setTTipAttrs }: TreeRectsProps) => {\n  return (\n    <>\n      {rects &&\n        rects.map((rect, i) => {\n          let maxChar = (rect.x1 - rect.x0) / 20\n          let txt: string = String((rect.data as Bucket).name)\n          txt = txt.length > maxChar ? txt.substring(0, maxChar) : txt\n          return (\n            <g className=\"group-container\" key={i}>\n              <rect\n                className=\"bucket\"\n                x={rect.x0}\n                y={rect.y0}\n                width={rect.x1 - rect.x0}\n                height={rect.y1 - rect.y0}\n                onClick={() => onSelect((rect.data as Bucket).children)}\n                onMouseEnter={(e) => {\n                  mouseOver(e, rect.data as Song, setTTipAttrs, options)\n                  onSelect((rect.data as Bucket).children)\n                }}\n                onMouseLeave={() => {\n                  mouseOut(setTTipAttrs)\n                  onSelect([])\n                }}\n              ></rect>\n              {rect.children &&\n                rect.children.map((child, i) => {\n                  return (\n                    <rect\n                      key={i}\n                      className={`single ${selected.includes(child.data as Song)}`}\n                      x={child.x0}\n                      y={child.y0}\n                      width={child.x1 - child.x0}\n                      height={child.y1 - child.y0}\n                    ></rect>\n                  )\n                })}\n              <text className=\"tree-label label\" x={rect.x0 + 10} y={rect.y0 + 35}>\n                {txt}\n              </text>\n            </g>\n          )\n        })}\n    </>\n  )\n}\n\nexport default TreeRects\n","import { useState } from 'react'\nimport { Bucket, ChartAttrs, chartProps } from '../../utils/interfaces'\nimport Tooltip from '../../components/Tooltip'\nimport './styles.css'\nimport { getBuckets } from '../../utils/utils'\nimport { hierarchy, treemap } from 'd3'\nimport TreeRects from './TreeRects'\nimport ChartContainer from '../ChartContainer'\n\nconst TreeMap = ({ options, data, onSelect, selected }: chartProps) => {\n  const [tTipAttrs, setTTipAttrs] = useState({\n    x: 0,\n    y: 0,\n    show: false,\n    content: '',\n  })\n\n  const chartAttrs: ChartAttrs = {\n    margin: {\n      top: 15,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n    width: 1000,\n    height: 700,\n  }\n\n  const buckets = getBuckets(options.x, data)\n  const root: { name: string; children: Bucket[] } = { name: 'root', children: buckets }\n\n  let tree = treemap()\n    .size([\n      chartAttrs.width - chartAttrs.margin.left - chartAttrs.margin.right,\n      chartAttrs.height - chartAttrs.margin.top - chartAttrs.margin.bottom,\n    ])\n    .paddingInner(0)\n    .paddingOuter(8)\n\n  let nodes = hierarchy(root).sum((d) => (d.children ? 0 : 1))\n  const rects = tree(nodes).children\n\n  return (\n    <>\n      <ChartContainer attrs={chartAttrs}>\n        <TreeRects\n          rects={rects}\n          selected={selected}\n          onSelect={onSelect}\n          setTTipAttrs={setTTipAttrs}\n          options={options}\n        />\n      </ChartContainer>\n      <Tooltip attrs={tTipAttrs} />\n    </>\n  )\n}\n\nexport default TreeMap\n","import BarChart from '../../charts/BarChart'\nimport CirclePack from '../../charts/CirclePack'\nimport Number from '../../charts/Number'\nimport PieChart from '../../charts/PieChart'\nimport ScatterPlot from '../../charts/ScatterPlot'\nimport Text from '../../charts/Text'\nimport TreeMap from '../../charts/TreeMap'\nimport { Song, DashboardItemDefinition } from '../../utils/interfaces'\n\ninterface ChartRendererProps {\n  options: DashboardItemDefinition\n  data: Song[]\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n}\n\nconst ChartRenderer = ({ options, data, onSelect, selected }: ChartRendererProps) => {\n  const setBlockType = (type: string) => {\n    switch (type) {\n      case 'number of':\n        return <Number options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'most of':\n        return <Text options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'bar':\n        return <BarChart options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'treemap':\n        return <TreeMap options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'circle pack':\n        return <CirclePack options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'pie':\n        return <PieChart options={options} data={data} onSelect={onSelect} selected={selected} />\n      case 'scatter plot':\n        return <ScatterPlot options={options} data={data} onSelect={onSelect} selected={selected} />\n      default:\n        return <h3>No Chart yet :( </h3>\n    }\n  }\n\n  return setBlockType(options.chart)\n}\nexport default ChartRenderer\n","import './styles.css'\nimport { DashboardItemDefinition, Song } from '../../utils/interfaces'\nimport ChartRenderer from '../ChartRenderer'\n\ninterface DashboardItemProps {\n  item: DashboardItemDefinition\n  onRemove: (id: string) => void\n  data: Song[]\n  selected: Song[]\n  onSelect: (songs: Song[]) => void\n}\n\nconst DashboardItem = ({ item, onRemove, data, onSelect, selected }: DashboardItemProps) => {\n  return (\n    <div className={`dashboard-item grid-${item.width}`}>\n      <h4>{item.title}</h4>\n      <div className=\"close\" onClick={() => onRemove(item.title)}>\n        x\n      </div>\n      <ChartRenderer options={item} data={data} onSelect={onSelect} selected={selected} />\n    </div>\n  )\n}\nexport default DashboardItem\n","import React from 'react'\nimport './styles.css'\nimport { DashboardItemDefinition, Song } from '../../utils/interfaces'\nimport DashboardItem from '../DashboardItem'\n\ninterface DashboardProps {\n  items: DashboardItemDefinition[]\n  data: Song[]\n  selected: Song[]\n  children: React.ReactChild\n  onRemove: (title: string) => void\n  onSelect: (songs: Song[]) => void\n}\n\nconst Dashboard = ({ items, children, onRemove, data, onSelect, selected }: DashboardProps) => {\n  return (\n    <div className=\"dashboard\">\n      {items.map((item) => (\n        <DashboardItem\n          item={item}\n          key={item.id}\n          onRemove={onRemove}\n          data={data}\n          onSelect={onSelect}\n          selected={selected}\n        />\n      ))}\n      {children}\n    </div>\n  )\n}\n\nexport default Dashboard\n","export const chart_types = [\n  'pie',\n  'bar',\n  'scatter plot',\n  'number of',\n  'most of',\n  'treemap',\n  'circle pack',\n]\nexport const width_options = ['3', '4', '6', '8', '9', '12']\nexport const colors = ['blue', 'orange', 'red']\nexport const cat_options = [\n  'Artist',\n  'City',\n  'Decade',\n  'Country',\n  'Name',\n  'Rank',\n  'key',\n  'time_signature',\n]\n\nexport const num_options = [\n  'Rank',\n  'acousticness',\n  'danceability',\n  'duration_ms',\n  'energy',\n  'liveness',\n  'loudness',\n  'speechiness',\n  'instrumentalness',\n  'key',\n  'tempo',\n  'time_signature',\n  'valence',\n]\n\nexport const map_options = [\n  'acousticness',\n  'danceability',\n  'energy',\n  'instrumentalness',\n  'liveness',\n  'speechiness',\n  'valence',\n]\n\nexport interface Song {\n  Artist: string\n  City: string\n  Country: string\n  Decade: number\n  Name: string\n  Rank: number\n  acousticness: number\n  danceability: number\n  duration_ms: number\n  energy: number\n  instrumentalness: number\n  key: number\n  liveness: number\n  loudness: number\n  speechiness: number\n  tempo: number\n  time_signature: number\n  valence: number\n}\n\nexport interface DashboardItemDefinition {\n  title: string\n  id: string\n  width: typeof width_options[number]\n  chart: typeof chart_types[number]\n  x: string\n  y: string\n  z: string\n}\n\nexport interface chartProps {\n  options: DashboardItemDefinition\n  data: Song[]\n  onSelect: (songs: Song[]) => void\n  selected: Song[]\n}\n\nexport interface Bucket {\n  name: string | number\n  children: Song[]\n}\n\nexport interface ChartAttrs {\n  margin: {\n    top: number\n    right: number\n    bottom: number\n    left: number\n  }\n  width: number\n  height: number\n}\n\nexport interface tTipAttrs {\n  x: number\n  y: number\n  show: boolean\n  content: string\n}\n","import './styles.css'\n\ninterface SelectProps {\n  options: string[] | number[]\n  label: string\n  setSelected: (value: string) => void\n  value: string | number | undefined\n}\n\nconst Select = ({ options, label, setSelected, value }: SelectProps) => {\n  return (\n    <div className=\"select-group\">\n      <label>{label}</label>\n      <select value={value} onChange={(event) => setSelected(event.target.value)}>\n        {options.map((option) => (\n          <option value={option} key={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\nexport default Select\n","import React, { useState } from 'react'\nimport './styles.css'\nimport {\n  DashboardItemDefinition,\n  chart_types,\n  width_options,\n  cat_options,\n  num_options,\n} from '../../utils/interfaces'\nimport Select from '../Select'\n\ninterface AddChartFormProps {\n  onNewChart: (chart: DashboardItemDefinition) => void\n}\n\nconst emptyChart: DashboardItemDefinition = {\n  title: '',\n  id: 'id',\n  width: '6',\n  chart: chart_types[0],\n  x: 'key',\n  y: 'danceability',\n  z: 'energy',\n}\n\nconst AddChartForm = ({ onNewChart }: AddChartFormProps) => {\n  const [chart, setChart] = useState(emptyChart)\n  const submit = (e: React.SyntheticEvent): void => {\n    e.preventDefault()\n    setField(chart.title + Math.random(), 'id')\n    onNewChart(chart)\n    setChart(emptyChart)\n  }\n\n  const setField = (value: string, field: string): void => {\n    setChart((prevState) => ({\n      ...prevState,\n      [field]: value,\n    }))\n  }\n\n  return (\n    <div className={`dashboard-item add grid-12`}>\n      <h3>Add your own chart</h3>\n      <form onSubmit={submit}>\n        <input\n          value={chart.title}\n          onChange={(event) => {\n            setField(event.target.value, 'title')\n            setField(event.target.value + Math.random(), 'id')\n          }}\n          type=\"text\"\n          placeholder=\"Write a title for this chart\"\n          required\n        />\n\n        <Select\n          value={chart.chart}\n          options={chart_types}\n          label={'Select a chart type'}\n          setSelected={(type) => setField(type, 'chart')}\n        />\n\n        <Select\n          value={chart.width}\n          options={width_options}\n          label={'Select the width'}\n          setSelected={(type) => setField(type, 'width')}\n        />\n\n        <Select\n          value={chart.x}\n          options={chart.chart === 'scatter plot' ? num_options : cat_options}\n          label={'Select x dimension'}\n          setSelected={(type) => setField(type, 'x')}\n        />\n\n        {chart.chart === 'scatter plot' && (\n          <Select\n            value={chart.y}\n            options={num_options}\n            label={'Select y dimension'}\n            setSelected={(type) => setField(type, 'y')}\n          />\n        )}\n\n        {chart.chart === 'scatter plot' && (\n          <Select\n            value={chart.z}\n            options={num_options}\n            label={'Select z dimension'}\n            setSelected={(type) => setField(type, 'z')}\n          />\n        )}\n\n        <button>Add Chart</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddChartForm\n","import './styles.css'\nimport { Song } from '../../utils/interfaces'\n\ninterface FooterProps {\n  data: Song[]\n}\n\nconst Footer = ({ data }: FooterProps) => {\n  return (\n    <div className=\"footer\">\n      <aside className=\"marquee\">\n        <div className=\"marquee-inner\">\n          <p>{data.map((song) => `${song.Name} - ${song.Artist} | `)}</p>\n        </div>\n      </aside>\n      <div className=\"bottom\">\n        <p>Laura Junco 2021</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import './styles.css'\n\ninterface headerProps {\n  text: string\n  onSetColor: (color: string) => void\n}\n\nconst Header = ({ text, onSetColor }: headerProps) => {\n  return (\n    <div className=\"header\">\n      <div className=\"listen\">\n        <a\n          href=\"https://open.spotify.com/playlist/5ZGpzktJOqvqoIVVuepVmg?si=47851c814d0a46f0\"\n          className=\"overlay\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          a\n        </a>\n        <span>🔊</span>\n      </div>\n      <h1>{text}</h1>\n      <div className=\"colors\">\n        <div className=\"color red\" onClick={() => onSetColor('red')}></div>\n        <div className=\"color blue\" onClick={() => onSetColor('blue')}></div>\n        <div className=\"color orange\" onClick={() => onSetColor('orange')}></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import { area, descending, format, Line, line, scaleLinear, select } from 'd3'\nimport { ChartAttrs, Song } from '../../utils/interfaces'\n\nclass Chart {\n  el: HTMLDivElement | null\n  svg: d3.Selection<SVGGElement, unknown, null, undefined>\n  attrs: ChartAttrs\n  x: d3.ScaleLinear<number, number, never>\n  groups: d3.Selection<SVGGElement | d3.BaseType, Song, SVGGElement, unknown>\n  circlesX: d3.Selection<SVGCircleElement, Song, SVGGElement, unknown>\n  circlesY: d3.Selection<SVGCircleElement, Song, SVGGElement, unknown>\n  xyArea\n  xLine: Line<Song>\n  yLine: Line<Song>\n  xPath: d3.Selection<SVGPathElement, Song[], null, undefined>\n  yPath: d3.Selection<SVGPathElement, Song[], null, undefined>\n  xyPath: d3.Selection<SVGPathElement, Song[], null, undefined>\n  xText\n  yText\n  f\n  text\n\n  constructor(el: HTMLDivElement | null, data: Song[]) {\n    // HTML element\n    this.el = el\n    select(el).html('')\n\n    // General chart attributes\n    this.attrs = {\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n      width: this.el ? this.el.clientWidth : 0,\n      height: 40 * data.length,\n    }\n\n    // format for numbers\n    this.f = format('.2f')\n\n    // svg element\n    this.svg = select(el)\n      .append('svg')\n      .attr('width', `${this.attrs.width + this.attrs.margin.left + this.attrs.margin.right}`)\n      .attr('height', `${this.attrs.height + this.attrs.margin.top + this.attrs.margin.bottom}`)\n      .append('g')\n      .attr('transform', `translate(${this.attrs.margin.left},${this.attrs.margin.top})`)\n\n    // scale for circles\n    this.x = scaleLinear()\n      .domain([0, 1])\n      .range([this.attrs.width / 1.5, this.attrs.width - 100])\n\n    // area\n    this.xyArea = area<Song>()\n      .x0(this.attrs.width / 1.5)\n      .x1(this.attrs.width / 1.5)\n      .y((d, i) => 40 * i + 20)\n\n    // line for x circles\n    this.xLine = line<Song>()\n      .x(this.attrs.width / 1.5)\n      .y((d, i) => 40 * i + 20)\n\n    // line for y circles\n    this.yLine = line<Song>()\n      .x(this.attrs.width / 1.5)\n      .y((d, i) => 40 * i + 20)\n\n    // Paths that join circles vertically\n    this.xPath = this.svg.append('path').attr('class', 'line-x').datum(data).attr('d', this.xLine)\n    this.yPath = this.svg.append('path').attr('class', 'line-y').datum(data).attr('d', this.yLine)\n\n    // Path for area\n    this.xyPath = this.svg\n      .append('path')\n      .attr('class', 'area-xy')\n      .datum(data)\n      .attr('d', this.xyArea)\n\n    // a g element groups every row\n    this.groups = this.svg\n      .selectAll('g.song')\n      .data(data)\n      .join('g')\n      .attr('class', 'song-group')\n      .attr('transform', (d: Song, i: number) => `translate(0,${40 * i})`)\n\n    //Rect that changes color on hover\n    this.groups\n      .append('rect')\n      .attr('class', 'bg-rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('width', this.attrs.width)\n      .attr('height', 40)\n\n    //text for each song\n    this.text = this.groups\n      .append('text')\n      .attr('class', 'song-text')\n      .attr('x', 20)\n      .attr('y', 20)\n      .text('')\n\n    //circles x\n    this.circlesX = this.groups\n      .append('circle')\n      .attr('class', 'circle-x')\n      .attr('r', 10)\n      .attr('cy', 20)\n      .attr('cx', this.attrs.width / 1.5)\n\n    //circles y\n    this.circlesY = this.groups\n      .append('circle')\n      .attr('class', 'circle-y')\n      .attr('r', 8)\n      .attr('cy', 20)\n      .attr('cx', this.attrs.width / 1.5)\n\n    // text x\n    this.xText = this.groups\n      .append('text')\n      .attr('class', 'circle-text')\n      .attr('x', this.attrs.width / 1.5)\n      .attr('y', 20)\n      .text('')\n\n    // text y\n    this.yText = this.groups\n      .append('text')\n      .attr('class', 'circle-text')\n      .attr('x', this.attrs.width / 1.5)\n      .attr('y', 20)\n      .text('')\n  }\n\n  update = (data: Song[], selectedX: string, selectedY: string, selectedOrder: string) => {\n    // sort data based on user selection\n    data = data.sort((a, b) => {\n      if (selectedOrder === 'Difference') {\n        return descending(\n          +a[selectedX as keyof Song] - +a[selectedY as keyof Song],\n          +b[selectedX as keyof Song] - +b[selectedY as keyof Song]\n        )\n      } else {\n        return descending(a[selectedOrder as keyof Song], b[selectedOrder as keyof Song])\n      }\n    })\n\n    // update lines\n    this.xLine.x((d: Song) => this.x(+d[selectedX as keyof Song]))\n    this.yLine.x((d: Song) => this.x(+d[selectedY as keyof Song]))\n\n    //update area\n    this.xyArea\n      .x0((d: Song) => this.x(+d[selectedX as keyof Song]))\n      .x1((d: Song) => this.x(+d[selectedY as keyof Song]))\n      .y((d, i) => 40 * i + 20)\n\n    // update lineas and area paths\n    this.xPath.datum(data).transition().duration(1000).attr('d', this.xLine)\n    this.yPath.datum(data).transition().duration(1000).attr('d', this.yLine)\n    this.xyPath.datum(data).transition().duration(1000).attr('d', this.xyArea)\n\n    // update rows position\n    this.groups\n      .data(data, (d) => d.Name + d.Artist)\n      .transition()\n      .duration(1000)\n      .attr('transform', (d: Song, i: number) => `translate(0,${40 * i})`)\n\n    // update text based on order selection\n    this.text.text((d: Song) => {\n      let maxChar = this.attrs.width / 40\n      let txt: string = ''\n\n      if (selectedOrder === 'Name') {\n        txt = d.Name\n      } else if (selectedOrder === 'Difference') {\n        txt = `${this.f(+d[selectedX as keyof Song] - +d[selectedY as keyof Song])} – ${d.Name}`\n      } else {\n        txt = `${d[selectedOrder as keyof Song]} – ${d.Name}`\n      }\n\n      return txt.length > maxChar ? `${txt.substring(0, maxChar)}...` : txt\n    })\n\n    // update circles x position\n    this.circlesX\n      .data(data, (d) => d.Name + d.Artist)\n      .transition()\n      .duration(1000)\n      .attr('cx', (d: Song) => this.x(+d[selectedX as keyof Song]))\n\n    // update circles y position\n    this.circlesY\n      .data(data, (d) => d.Name + d.Artist)\n      .transition()\n      .duration(1000)\n      .attr('cx', (d: Song) => this.x(+d[selectedY as keyof Song]))\n\n    // update texts x position\n    this.xText\n      .data(data, (d) => d.Name + d.Artist)\n      .text((d: Song) => this.f(+d[selectedX as keyof Song]))\n      .transition()\n      .duration(1000)\n      .attr('x', (d: Song) => {\n        const diff = +d[selectedX as keyof Song] - +d[selectedY as keyof Song]\n        return diff > 0\n          ? this.x(+d[selectedX as keyof Song]) + 20\n          : this.x(+d[selectedX as keyof Song]) - 20\n      })\n      .style('text-anchor', (d) => {\n        const diff = +d[selectedX as keyof Song] - +d[selectedY as keyof Song]\n        return diff > 0 ? 'start' : 'end'\n      })\n\n    // update texts y position\n    this.yText\n      .data(data, (d) => d.Name + d.Artist)\n      .text((d: Song) => this.f(+d[selectedY as keyof Song]))\n      .transition()\n      .duration(1000)\n      .attr('x', (d: Song) => {\n        const diff = +d[selectedX as keyof Song] - +d[selectedY as keyof Song]\n        return diff > 0\n          ? this.x(+d[selectedY as keyof Song]) - 20\n          : this.x(+d[selectedY as keyof Song]) + 20\n      })\n      .style('text-anchor', (d) => {\n        const diff = +d[selectedX as keyof Song] - +d[selectedY as keyof Song]\n        return diff > 0 ? 'end' : 'start'\n      })\n  }\n}\n\nexport default Chart\n","import { useEffect, useRef, useState } from 'react'\nimport './styles.css'\nimport { map_options, Song } from '../../utils/interfaces'\nimport Select from '../Select'\nimport Chart from './chart'\nimport { keys } from '../../App'\n\nlet vis: any = {}\n\ninterface TopSongsProps {\n  data: Song[]\n}\n\nconst TopSongs = ({ data }: TopSongsProps) => {\n  const [selectedX, setSelectedX] = useState('acousticness')\n  const [selectedY, setSelectedY] = useState('instrumentalness')\n  const [selectedOrder, setSelectedOrder] = useState('Difference')\n  const el = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    vis = new Chart(el.current, data)\n  }, [data])\n\n  useEffect(() => {\n    vis && vis.update(data, selectedX, selectedY, selectedOrder)\n  }, [selectedOrder, selectedX, selectedY, data])\n\n  useEffect(() => {\n    let resizeTimer: NodeJS.Timeout\n    const handleResize = () => {\n      clearTimeout(resizeTimer)\n      resizeTimer = setTimeout(function () {\n        vis = {}\n        vis = new Chart(el.current, data)\n        vis.update(data, selectedX, selectedY, selectedOrder)\n      }, 300)\n    }\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [selectedOrder, selectedX, selectedY, data])\n\n  return (\n    <div className=\"top-songs\">\n      <div className=\"selection-bar\">\n        <div className=\"select-order\">\n          <Select\n            label={'Order by'}\n            setSelected={(cat) => {\n              setSelectedOrder(cat)\n            }}\n            value={selectedOrder}\n            options={['Difference', ...keys]}\n          />\n        </div>\n\n        <div className=\"select-categories\">\n          <Select\n            label={''}\n            setSelected={(cat) => {\n              setSelectedX(cat)\n            }}\n            value={selectedX}\n            options={map_options}\n          />\n\n          <Select\n            label={''}\n            setSelected={(cat) => {\n              setSelectedY(cat)\n            }}\n            value={selectedY}\n            options={map_options}\n          />\n        </div>\n      </div>\n\n      <div className=\"vis-container\" ref={el} />\n    </div>\n  )\n}\n\nexport default TopSongs\n","import { useState } from 'react'\nimport './Base.css'\nimport './App.css'\nimport Dashboard from './components/Dashboard'\nimport { colors, DashboardItemDefinition, Song } from './utils/interfaces'\nimport AddChartForm from './components/AddChartForm'\nimport data from './data/top20songs_1970s-2000s.json'\nimport chartsData from './data/starter_charts.json'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport TopSongs from './components/TopSongs'\n\nconst dataset: Song[] = data\nconst dashboardItems: DashboardItemDefinition[] = chartsData\nexport const keys: string[] = Object.keys(dataset[0])\n\nconst App = () => {\n  const [items, setItems] = useState(dashboardItems)\n  const [selected, setSelected] = useState<Song[]>([])\n  const [color, setColor] = useState(colors[Math.floor(Math.random() * colors.length)])\n\n  return (\n    <div className={`app ${color}`}>\n      <main>\n        <Header text={'Discover the Top 20 Songs 1960s-2000s'} onSetColor={setColor} />\n        <TopSongs data={dataset} />\n        <Dashboard\n          items={items}\n          data={dataset}\n          onSelect={(songs) => setSelected(songs)}\n          selected={selected}\n          onRemove={(title) => {\n            const newItems = items.filter((item) => item.title !== title)\n            setItems(newItems)\n          }}\n        >\n          <AddChartForm\n            onNewChart={(chart: DashboardItemDefinition) => {\n              const newItems = [...items, chart]\n              setItems(newItems)\n            }}\n          />\n        </Dashboard>\n      </main>\n      <Footer data={dataset} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}